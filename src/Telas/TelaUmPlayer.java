/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Telas;

import Classes.*;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import java.util.Random;

/**
 *
 * @author helio
 */
public class TelaUmPlayer extends javax.swing.JFrame {
//INIMIGO É A MAQUINA
//AMIGO É O PLAYER
    Personagem amigo;
    ArrayList<Personagem> inimigo = new ArrayList<Personagem>();
    private int nJogadas = 0;
    int auxBotoes = 0;
    int codMagia = 0;//CONTADOR MAGIA AMIGO
    int codMagiaInimigo = 0;//CONTAOR MAGIA INIMIGO
    int idPersonagem = 0;//CONTADOR PARA O ARRAY INIMIGO
    int controlaJoagada = 0; //0 é amigo e 1 inimigo
    Random gerador = new Random(); //GERAR UM NUMERO PARA O ATAQUE DO INIMIGO
    
    /* criando as armas*/
    Arma garraLetal = new Arma("Garra Letal", 200);
    Arma tridenteSagrado = new Arma("Tridente Sagrado", 320);
    Arma espadaBarroca = new Arma("Espada Barroca", 400);
    Arma porrete = new Arma("Porrete", 280);
    Arma cajado = new Arma("Cajado", 100);
    Arma besta = new Arma("Besta", 320);
    Arma esferaDeAtaque = new Arma("Esfera de Ataque", 300);
    //-------------------------

    /* criando as magias*/
    Magia pocaoDeVida = new Magia("Pocao de Vida", 0, 200, 12);
    Magia halitoDeFogo = new Magia("Halito de Fogo", 400, 0, 12);
    Magia bioAntraz = new Magia("Bio Antraz", 360, 0, 14);
    Magia cura = new Magia("Cura", 0, 400, 16);
    Magia flamaGelada = new Magia("Flama Gelada", 320, 0, 14);
    Magia envenenamento = new Magia("Envenenamento", 280, 0, 12);
    Magia tempestade = new Magia("Tempestade", 200, 0, 12);
    //----------------------------

    /**
     * Creates new form TelaUmPlayer
     */
    public TelaUmPlayer() {
        initComponents();
        setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel = new javax.swing.JLabel();
        jLabel0 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jL_Vida = new javax.swing.JLabel();
        jL_Mana = new javax.swing.JLabel();
        jL_ResistenciaFisica = new javax.swing.JLabel();
        jL_ResistenciaMagica = new javax.swing.JLabel();
        jL_Classe = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jL_VidaI = new javax.swing.JLabel();
        jL_ManaI = new javax.swing.JLabel();
        jL_ResistenciaFisicaI = new javax.swing.JLabel();
        jL_ResistenciaMagicaI = new javax.swing.JLabel();
        jL_ClasseI = new javax.swing.JLabel();
        jBpocaoDeVida = new javax.swing.JButton();
        jBhálitoDeFogo = new javax.swing.JButton();
        jBbioAntraz = new javax.swing.JButton();
        jBcura = new javax.swing.JButton();
        jBflamaGelada = new javax.swing.JButton();
        jBenvenenamento = new javax.swing.JButton();
        jBtempestade = new javax.swing.JButton();
        jBgarraLetal = new javax.swing.JButton();
        jBtridenteSagrado = new javax.swing.JButton();
        jBporrete = new javax.swing.JButton();
        jBcajado = new javax.swing.JButton();
        jBbesta = new javax.swing.JButton();
        jBesferaDeAtaque = new javax.swing.JButton();
        jBespadaBarroca = new javax.swing.JButton();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jLclasseI = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();
        jLabel25 = new javax.swing.JLabel();
        jLabel26 = new javax.swing.JLabel();
        jLabel27 = new javax.swing.JLabel();
        jLabel28 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMaximumSize(new java.awt.Dimension(1000, 580));
        setMinimumSize(new java.awt.Dimension(1000, 590));
        getContentPane().setLayout(null);

        jLabel.setForeground(new java.awt.Color(255, 255, 255));
        jLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel.setText("Ponte de Vida");
        getContentPane().add(jLabel);
        jLabel.setBounds(10, 330, 80, 24);

        jLabel0.setForeground(new java.awt.Color(255, 255, 255));
        jLabel0.setText("Pontos de Mana");
        getContentPane().add(jLabel0);
        jLabel0.setBounds(110, 340, 90, 14);

        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Resistencia Física");
        getContentPane().add(jLabel3);
        jLabel3.setBounds(420, 340, 110, 14);

        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Resistencia Mágica");
        getContentPane().add(jLabel4);
        jLabel4.setBounds(540, 340, 120, 20);

        jL_Vida.setForeground(new java.awt.Color(255, 255, 255));
        jL_Vida.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));
        getContentPane().add(jL_Vida);
        jL_Vida.setBounds(10, 50, 70, 14);

        jL_Mana.setForeground(new java.awt.Color(255, 255, 255));
        jL_Mana.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));
        getContentPane().add(jL_Mana);
        jL_Mana.setBounds(100, 50, 70, 14);

        jL_ResistenciaFisica.setForeground(new java.awt.Color(255, 255, 255));
        jL_ResistenciaFisica.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));
        getContentPane().add(jL_ResistenciaFisica);
        jL_ResistenciaFisica.setBounds(400, 50, 100, 14);

        jL_ResistenciaMagica.setForeground(new java.awt.Color(255, 255, 255));
        jL_ResistenciaMagica.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));
        getContentPane().add(jL_ResistenciaMagica);
        jL_ResistenciaMagica.setBounds(530, 50, 120, 14);

        jL_Classe.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        getContentPane().add(jL_Classe);
        jL_Classe.setBounds(200, 0, 254, 20);

        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("Amigo");
        getContentPane().add(jLabel6);
        jLabel6.setBounds(38, 6, 69, 14);

        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setText("Inimigo");
        getContentPane().add(jLabel7);
        jLabel7.setBounds(10, 310, 60, 14);

        jLabel10.setForeground(new java.awt.Color(255, 255, 255));
        jLabel10.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel10.setText("Ponte de Vida");
        getContentPane().add(jLabel10);
        jLabel10.setBounds(10, 30, 80, 24);

        jLabel8.setForeground(new java.awt.Color(255, 255, 255));
        jLabel8.setText("Pontos de Mana");
        getContentPane().add(jLabel8);
        jLabel8.setBounds(100, 30, 90, 14);

        jLabel13.setForeground(new java.awt.Color(255, 255, 255));
        jLabel13.setText("Resistencia Física");
        getContentPane().add(jLabel13);
        jLabel13.setBounds(400, 30, 110, 14);

        jLabel14.setForeground(new java.awt.Color(255, 255, 255));
        jLabel14.setText("Resistencia Mágica");
        getContentPane().add(jLabel14);
        jLabel14.setBounds(530, 24, 120, 20);

        jL_VidaI.setForeground(new java.awt.Color(255, 255, 255));
        jL_VidaI.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));
        getContentPane().add(jL_VidaI);
        jL_VidaI.setBounds(10, 360, 65, 14);

        jL_ManaI.setForeground(new java.awt.Color(255, 255, 255));
        jL_ManaI.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));
        getContentPane().add(jL_ManaI);
        jL_ManaI.setBounds(110, 360, 77, 14);

        jL_ResistenciaFisicaI.setForeground(new java.awt.Color(255, 255, 255));
        jL_ResistenciaFisicaI.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));
        getContentPane().add(jL_ResistenciaFisicaI);
        jL_ResistenciaFisicaI.setBounds(420, 360, 84, 14);

        jL_ResistenciaMagicaI.setForeground(new java.awt.Color(255, 255, 255));
        jL_ResistenciaMagicaI.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));
        getContentPane().add(jL_ResistenciaMagicaI);
        jL_ResistenciaMagicaI.setBounds(540, 360, 88, 14);
        getContentPane().add(jL_ClasseI);
        jL_ClasseI.setBounds(100, 310, 98, 0);

        jBpocaoDeVida.setText("Poção de Vida");
        jBpocaoDeVida.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBpocaoDeVidaActionPerformed(evt);
            }
        });
        getContentPane().add(jBpocaoDeVida);
        jBpocaoDeVida.setBounds(10, 100, 120, 23);

        jBhálitoDeFogo.setText("Hálito de Fogo");
        jBhálitoDeFogo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBhálitoDeFogoActionPerformed(evt);
            }
        });
        getContentPane().add(jBhálitoDeFogo);
        jBhálitoDeFogo.setBounds(150, 100, 110, 23);

        jBbioAntraz.setText("Bio Antraz");
        jBbioAntraz.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBbioAntrazActionPerformed(evt);
            }
        });
        getContentPane().add(jBbioAntraz);
        jBbioAntraz.setBounds(280, 100, 90, 23);

        jBcura.setText("Cura");
        jBcura.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBcuraActionPerformed(evt);
            }
        });
        getContentPane().add(jBcura);
        jBcura.setBounds(390, 100, 80, 23);

        jBflamaGelada.setText("Flama Gelada");
        jBflamaGelada.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBflamaGeladaActionPerformed(evt);
            }
        });
        getContentPane().add(jBflamaGelada);
        jBflamaGelada.setBounds(490, 100, 120, 23);

        jBenvenenamento.setText("Envenenamento");
        jBenvenenamento.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBenvenenamentoActionPerformed(evt);
            }
        });
        getContentPane().add(jBenvenenamento);
        jBenvenenamento.setBounds(630, 100, 120, 23);

        jBtempestade.setText("Tempestade");
        jBtempestade.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtempestadeActionPerformed(evt);
            }
        });
        getContentPane().add(jBtempestade);
        jBtempestade.setBounds(770, 100, 100, 23);

        jBgarraLetal.setText("Garra Letal");
        jBgarraLetal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBgarraLetalActionPerformed(evt);
            }
        });
        getContentPane().add(jBgarraLetal);
        jBgarraLetal.setBounds(10, 210, 100, 23);

        jBtridenteSagrado.setText("Tridente Sagrado");
        jBtridenteSagrado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtridenteSagradoActionPerformed(evt);
            }
        });
        getContentPane().add(jBtridenteSagrado);
        jBtridenteSagrado.setBounds(280, 210, 130, 23);

        jBporrete.setText("Porrete");
        jBporrete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBporreteActionPerformed(evt);
            }
        });
        getContentPane().add(jBporrete);
        jBporrete.setBounds(540, 210, 90, 23);

        jBcajado.setText("Cajado");
        jBcajado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBcajadoActionPerformed(evt);
            }
        });
        getContentPane().add(jBcajado);
        jBcajado.setBounds(660, 210, 90, 23);

        jBbesta.setText("Besta");
        jBbesta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBbestaActionPerformed(evt);
            }
        });
        getContentPane().add(jBbesta);
        jBbesta.setBounds(420, 210, 90, 23);

        jBesferaDeAtaque.setText("Esfera de ataque");
        jBesferaDeAtaque.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBesferaDeAtaqueActionPerformed(evt);
            }
        });
        getContentPane().add(jBesferaDeAtaque);
        jBesferaDeAtaque.setBounds(770, 210, 140, 23);

        jBespadaBarroca.setText("Espada Barroca");
        jBespadaBarroca.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBespadaBarrocaActionPerformed(evt);
            }
        });
        getContentPane().add(jBespadaBarroca);
        jBespadaBarroca.setBounds(130, 210, 130, 23);

        jLabel16.setForeground(new java.awt.Color(255, 255, 255));
        jLabel16.setText("Magia");
        getContentPane().add(jLabel16);
        jLabel16.setBounds(10, 80, 50, 14);

        jLabel17.setForeground(new java.awt.Color(255, 255, 255));
        jLabel17.setText("Armas");
        getContentPane().add(jLabel17);
        jLabel17.setBounds(10, 190, 50, 14);
        getContentPane().add(jLclasseI);
        jLclasseI.setBounds(130, 304, 130, 20);

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Telas/giphy (2).gif"))); // NOI18N
        getContentPane().add(jLabel2);
        jLabel2.setBounds(0, 310, 480, 240);

        jLabel5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Telas/giphy (2).gif"))); // NOI18N
        getContentPane().add(jLabel5);
        jLabel5.setBounds(530, 70, 480, 240);

        jLabel9.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Telas/giphy (2).gif"))); // NOI18N
        getContentPane().add(jLabel9);
        jLabel9.setBounds(0, 0, 480, 240);

        jLabel15.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Telas/giphy (2).gif"))); // NOI18N
        getContentPane().add(jLabel15);
        jLabel15.setBounds(540, 180, 480, 240);

        jLabel18.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Telas/giphy (2).gif"))); // NOI18N
        getContentPane().add(jLabel18);
        jLabel18.setBounds(490, 300, 480, 240);

        jLabel19.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Telas/giphy (2).gif"))); // NOI18N
        getContentPane().add(jLabel19);
        jLabel19.setBounds(480, 210, 480, 240);

        jLabel20.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Telas/giphy (2).gif"))); // NOI18N
        getContentPane().add(jLabel20);
        jLabel20.setBounds(490, 70, 480, 240);

        jLabel21.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Telas/giphy (2).gif"))); // NOI18N
        getContentPane().add(jLabel21);
        jLabel21.setBounds(520, 0, 480, 240);

        jLabel22.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Telas/giphy (2).gif"))); // NOI18N
        getContentPane().add(jLabel22);
        jLabel22.setBounds(320, 0, 480, 240);

        jLabel11.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Telas/giphy (2).gif"))); // NOI18N
        getContentPane().add(jLabel11);
        jLabel11.setBounds(300, 110, 480, 240);

        jLabel12.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Telas/giphy (2).gif"))); // NOI18N
        getContentPane().add(jLabel12);
        jLabel12.setBounds(0, 230, 480, 240);

        jLabel23.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Telas/giphy (2).gif"))); // NOI18N
        getContentPane().add(jLabel23);
        jLabel23.setBounds(490, 70, 480, 240);

        jLabel24.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Telas/giphy (2).gif"))); // NOI18N
        getContentPane().add(jLabel24);
        jLabel24.setBounds(490, 0, 480, 240);

        jLabel25.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Telas/giphy (2).gif"))); // NOI18N
        getContentPane().add(jLabel25);
        jLabel25.setBounds(330, 300, 480, 240);

        jLabel26.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Telas/giphy (2).gif"))); // NOI18N
        getContentPane().add(jLabel26);
        jLabel26.setBounds(330, 320, 480, 240);

        jLabel27.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Telas/giphy (2).gif"))); // NOI18N
        getContentPane().add(jLabel27);
        jLabel27.setBounds(490, 300, 480, 240);

        jLabel28.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Telas/giphy (2).gif"))); // NOI18N
        getContentPane().add(jLabel28);
        jLabel28.setBounds(540, 320, 480, 240);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jBcajadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBcajadoActionPerformed
        //amigo
        if (controlaJoagada == 0) {
            nJogadas += 1;
            amigo.ataque(inimigo.get(idPersonagem), cajado);
            controlaJoagada = 1;
            if (0 >= inimigo.get(idPersonagem).getPontoDeVida()) {
                verifaVidaInimigo();
            } else {
                codMagia += 50;
                if (codMagia == 150) {
                    amigo.recuperaMana();
                    codMagia = 50;
                }
                imprimiBotoes();
                vezInimigo();
            }
        } else {
            //inimigo
            JOptionPane.showMessageDialog(null, "Inimigo CAJADO");
            inimigo.get(idPersonagem).ataque(amigo, cajado);
            controlaJoagada = 0;
            if (0 >= amigo.getPontoDeVida()) {
                verifaVidaAmigo();
            } else {
                codMagiaInimigo += 50;
                if (codMagiaInimigo >= 150) {
                    inimigo.get(idPersonagem).recuperaMana();
                    codMagiaInimigo = 50;
                }
                imprimiBotoes();
            }
        }
        imprimiBotoes();
    }//GEN-LAST:event_jBcajadoActionPerformed

    private void jBpocaoDeVidaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBpocaoDeVidaActionPerformed
        if (controlaJoagada == 0) {
            if (amigo.getPontosDeMana() >= 12) {
                nJogadas += 1;
                amigo.ataque(pocaoDeVida);
                controlaJoagada = 1;
                imprimiBotoes();
                vezInimigo();
            } else {
                controlaJoagada = 0;
                JOptionPane.showMessageDialog(null, "qtd de mana insugiciente.");
            }
            //INIMIGO
        } else {
            if (inimigo.get(idPersonagem).getPontosDeMana() >= 12) {
            JOptionPane.showMessageDialog(null, "Inimigo POÇÃO DE VIDA");
            nJogadas += 1;
            imprimiBotoes();
            inimigo.get(idPersonagem).ataque(pocaoDeVida);
            controlaJoagada = 0;
        } else {
            controlaJoagada = 1;
            vezInimigo();
        }
        }
        imprimiBotoes();
    }//GEN-LAST:event_jBpocaoDeVidaActionPerformed

    private void jBhálitoDeFogoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBhálitoDeFogoActionPerformed
        if (controlaJoagada == 0) {
            if (amigo.getPontosDeMana() >= 12) {
                nJogadas += 1;
                amigo.ataque(inimigo.get(idPersonagem), halitoDeFogo);
                controlaJoagada = 1;
                verifaVidaInimigo();
                imprimiBotoes();
                vezInimigo();
            } else {
                controlaJoagada = 0;
                JOptionPane.showMessageDialog(null, "qtd de mana insugiciente.");
            }
            //INIMIGO
        } else{
            if (inimigo.get(idPersonagem).getPontosDeMana() >= 12) {
            JOptionPane.showMessageDialog(null, "Inimigo HALITO DE FOGO");
            nJogadas += 1;
            imprimiBotoes();
            inimigo.get(idPersonagem).ataque(amigo, halitoDeFogo);
            controlaJoagada = 0;
            verifaVidaAmigo();
        } else {
            controlaJoagada = 1;
            vezInimigo();
        }
        }
        imprimiBotoes();
    }//GEN-LAST:event_jBhálitoDeFogoActionPerformed

    private void jBbioAntrazActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBbioAntrazActionPerformed
        if (controlaJoagada == 0) {
            if (amigo.getPontosDeMana() >= 14) {
                nJogadas += 1;
                amigo.ataque(inimigo.get(idPersonagem), bioAntraz);
                controlaJoagada = 1;
                verifaVidaInimigo();
                imprimiBotoes();
                vezInimigo();
            } else {
                controlaJoagada = 0;
                JOptionPane.showMessageDialog(null, "qtd de mana insugiciente.");
            }
            //INIMIGO
        }else{
            if (inimigo.get(idPersonagem).getPontosDeMana() >= 14) {
            JOptionPane.showMessageDialog(null, "Inimigo BIO ANTRAZ");
            nJogadas += 1;
            imprimiBotoes();
            inimigo.get(idPersonagem).ataque(amigo, bioAntraz);
            controlaJoagada = 0;
            verifaVidaAmigo();
            
        } else {
            controlaJoagada = 1;
            vezInimigo();
        }
        }
        imprimiBotoes();
    }//GEN-LAST:event_jBbioAntrazActionPerformed

    private void jBcuraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBcuraActionPerformed
        if (controlaJoagada == 0) {
            if (amigo.getPontosDeMana() >= 12) {
                nJogadas += 1;
                amigo.ataque(cura);
                controlaJoagada = 1;
                imprimiBotoes();
                vezInimigo();
            } else {
                controlaJoagada = 0;
                JOptionPane.showMessageDialog(null, "qtd de mana insugiciente.");
            }
            //INIMIGO
        } else { 
            if (inimigo.get(idPersonagem).getPontosDeMana() >= 12) {
            JOptionPane.showMessageDialog(null, "Inimigo CURA");
            nJogadas += 1;
            imprimiBotoes();
            inimigo.get(idPersonagem).ataque(cura);
            controlaJoagada = 0;
        } else {
            controlaJoagada = 1;
            vezInimigo();
        }
        }
        imprimiBotoes();
    }//GEN-LAST:event_jBcuraActionPerformed

    private void jBflamaGeladaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBflamaGeladaActionPerformed
        if (controlaJoagada == 0) {
            if (amigo.getPontosDeMana() >= 14) {
                nJogadas += 1;
                amigo.ataque(inimigo.get(idPersonagem), flamaGelada);
                controlaJoagada = 1;
                verifaVidaInimigo();
                imprimiBotoes();
                vezInimigo();
            } else {
                controlaJoagada = 0;
                JOptionPane.showMessageDialog(null, "qtd de mana insugiciente.");
            }
            //INIMIGO
        } else {
            if (inimigo.get(idPersonagem).getPontosDeMana() >= 14) {
            JOptionPane.showMessageDialog(null, "Inimigo FLAMA GELADA");
            nJogadas += 1;
            imprimiBotoes();
            inimigo.get(idPersonagem).ataque(amigo, flamaGelada);
            controlaJoagada = 0;
            verifaVidaAmigo();
        } else {
            controlaJoagada = 1;
            vezInimigo();
        }
        }
        imprimiBotoes();
    }//GEN-LAST:event_jBflamaGeladaActionPerformed

    private void jBenvenenamentoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBenvenenamentoActionPerformed
        if (controlaJoagada == 0) {
            if (amigo.getPontosDeMana() >= 12) {
                nJogadas += 1;
                amigo.ataque(inimigo.get(idPersonagem), envenenamento);
                controlaJoagada = 1;
                verifaVidaInimigo();
                imprimiBotoes();
                vezInimigo();
            } else {
                controlaJoagada = 0;
                JOptionPane.showMessageDialog(null, "qtd de mana insugiciente.");
            }
            //INIMIGO
        } else {
            if (inimigo.get(idPersonagem).getPontosDeMana() >= 12) {
            JOptionPane.showMessageDialog(null, "Inimigo ENVENENAMENTO");
            nJogadas += 1;
            imprimiBotoes();
            inimigo.get(idPersonagem).ataque(amigo, envenenamento);
            controlaJoagada = 0;
            verifaVidaAmigo();
            } else {
            controlaJoagada = 1;
            vezInimigo();
        }
        }
        imprimiBotoes();
    }//GEN-LAST:event_jBenvenenamentoActionPerformed

    private void jBtempestadeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtempestadeActionPerformed
        if (controlaJoagada == 0) {
            if (amigo.getPontosDeMana() >= 12) {
                nJogadas += 1;
                amigo.ataque(inimigo.get(idPersonagem), tempestade);
                controlaJoagada = 1;
                verifaVidaInimigo();
                imprimiBotoes();
                vezInimigo();
            } else {
                controlaJoagada = 0;
                JOptionPane.showMessageDialog(null, "qtd de mana insugiciente.");
            }
            //INIMIGO
        } else {
            if (inimigo.get(idPersonagem).getPontosDeMana() >= 12) {
            JOptionPane.showMessageDialog(null, "Inimigo TEMPESTADE");
            nJogadas += 1;
            imprimiBotoes();
            inimigo.get(idPersonagem).ataque(amigo, tempestade);
            controlaJoagada = 0;
            verifaVidaAmigo();
            } else {
            controlaJoagada = 1;
            vezInimigo();
        }
        }
        imprimiBotoes();
    }//GEN-LAST:event_jBtempestadeActionPerformed

    private void jBgarraLetalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBgarraLetalActionPerformed
        //amigo
        if (controlaJoagada == 0) {
            nJogadas += 1;
            amigo.ataque(inimigo.get(idPersonagem), garraLetal);
            controlaJoagada = 1;
            if (0 >= inimigo.get(idPersonagem).getPontoDeVida()) {
                verifaVidaInimigo();
            } else {
                codMagia += 50;
                if (codMagia == 150) {
                    amigo.recuperaMana();
                    codMagia = 50;
                }
            imprimiBotoes();               
            vezInimigo();
            }
        } else {
            //inimigo
            JOptionPane.showMessageDialog(null, "Inimigo GARRA LETAL");
            inimigo.get(idPersonagem).ataque(amigo, garraLetal);
            controlaJoagada = 0;
            if (0 >= amigo.getPontoDeVida()) {
                verifaVidaAmigo();
            } else {
                codMagiaInimigo += 50;
                if (codMagiaInimigo >= 150) {
                    inimigo.get(idPersonagem).recuperaMana();
                    codMagiaInimigo = 50;
                }
                imprimiBotoes();
            }
        }
         imprimiBotoes();
    }//GEN-LAST:event_jBgarraLetalActionPerformed

    private void jBespadaBarrocaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBespadaBarrocaActionPerformed
        //amigo
        if (controlaJoagada == 0) {
            nJogadas += 1;
            amigo.ataque(inimigo.get(idPersonagem), espadaBarroca);
            controlaJoagada = 1;
            if (0 >= inimigo.get(idPersonagem).getPontoDeVida()) {
                verifaVidaInimigo();
            } else {
                codMagia += 50;
                if (codMagia == 150) {
                    amigo.recuperaMana();
                    codMagia = 50;
                }
                imprimiBotoes(); 
                vezInimigo();
            }
        } else {
            //inimigo
            JOptionPane.showMessageDialog(null, "Inimigo ESPADA BARROCA");
            inimigo.get(idPersonagem).ataque(amigo, espadaBarroca);
            controlaJoagada = 0;
            if (0 >= amigo.getPontoDeVida()) {
                verifaVidaAmigo();
            } else {
                codMagiaInimigo += 50;
                if (codMagiaInimigo >= 150) {
                    inimigo.get(idPersonagem).recuperaMana();
                    codMagiaInimigo = 50;
                }
                imprimiBotoes();
            }
        }
        imprimiBotoes();
    }//GEN-LAST:event_jBespadaBarrocaActionPerformed

    private void jBtridenteSagradoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtridenteSagradoActionPerformed
        //amigo
        if (controlaJoagada == 0) {
            nJogadas += 1;
            amigo.ataque(inimigo.get(idPersonagem), tridenteSagrado);
            controlaJoagada = 1;
            if (0>= inimigo.get(idPersonagem).getPontoDeVida()) {
                verifaVidaInimigo();
            } else {
                codMagia += 50;
                if (codMagia == 150) {
                    amigo.recuperaMana();
                    codMagia = 50;
                }
            imprimiBotoes();               
            vezInimigo();
            }
        } else {
            //inimigo
            JOptionPane.showMessageDialog(null, "Inimigo TRIDENTE SAGRADO");
            inimigo.get(idPersonagem).ataque(amigo, tridenteSagrado);
            controlaJoagada = 0;
            if (0 >= amigo.getPontoDeVida()) {
                verifaVidaAmigo();
            } else {
                codMagiaInimigo += 50;
                if (codMagiaInimigo >= 150) {
                    inimigo.get(idPersonagem).recuperaMana();
                    codMagiaInimigo = 50;
                }
                imprimiBotoes();
            }
        }
        imprimiBotoes();
    }//GEN-LAST:event_jBtridenteSagradoActionPerformed

    private void jBporreteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBporreteActionPerformed
        //amigo
        if (controlaJoagada == 0) {
            nJogadas += 1;
            amigo.ataque(inimigo.get(idPersonagem), porrete);
            controlaJoagada = 1;
            if (0 >= inimigo.get(idPersonagem).getPontoDeVida()) {
                verifaVidaInimigo();
            } else {
                codMagia += 50;
                if (codMagia == 150) {
                    amigo.recuperaMana();
                    codMagia = 50;
                }
                imprimiBotoes();
                vezInimigo();
            }
        } else {
            //inimigo
            JOptionPane.showMessageDialog(null, "Inimigo PORRETE");
            inimigo.get(idPersonagem).ataque(amigo, porrete);
            controlaJoagada = 0;
            if (0 >= amigo.getPontoDeVida()) {
                verifaVidaAmigo();
            } else {
                codMagiaInimigo += 50;
                if (codMagiaInimigo >= 150) {
                    inimigo.get(idPersonagem).recuperaMana();
                    codMagiaInimigo = 50;
                }
                imprimiBotoes();
            }
        }
        imprimiBotoes();
    }//GEN-LAST:event_jBporreteActionPerformed

    private void jBbestaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBbestaActionPerformed
        //amigo
        if (controlaJoagada == 0) {
            this.nJogadas += 1;
            amigo.ataque(inimigo.get(idPersonagem), besta);
            if (0 >= inimigo.get(idPersonagem).getPontoDeVida()) {
                 verifaVidaInimigo();
            } else {
                codMagia += 50;
                if (codMagia == 150) {
                    amigo.recuperaMana();
                    codMagia = 50;
                }
                imprimiBotoes();               
                vezInimigo();
            }
        } else {
            //inimigo
            JOptionPane.showMessageDialog(null, "Inimigo BESTA");
            inimigo.get(idPersonagem).ataque(amigo, besta);
            controlaJoagada = 0;
            if (amigo.getPontoDeVida() <= 0) {
                verifaVidaAmigo();
            } else {
                codMagiaInimigo += 50;
                if (codMagiaInimigo >= 100) {
                    inimigo.get(idPersonagem).recuperaMana();
                    codMagiaInimigo = 50;
                }
                imprimiBotoes();
            }
        }
         imprimiBotoes();
    }//GEN-LAST:event_jBbestaActionPerformed

    private void jBesferaDeAtaqueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBesferaDeAtaqueActionPerformed
        //amigo
        if (controlaJoagada == 0) {
            nJogadas += 1;
            amigo.ataque(inimigo.get(idPersonagem), esferaDeAtaque);
            if (0 >= inimigo.get(idPersonagem).getPontoDeVida()) {
                verifaVidaInimigo();
            } else {
                codMagia += 50;
                if (codMagia == 150) {
                    amigo.recuperaMana();
                    codMagia = 50;
                }
                imprimiBotoes();               
                vezInimigo();
            }
        } else {
            //inimigo
            JOptionPane.showMessageDialog(null, "Inimigo ESFERA DE ATAQUE");
            inimigo.get(idPersonagem).ataque(amigo, garraLetal);
            controlaJoagada = 0;
            if (0 >= amigo.getPontoDeVida()) {
                verifaVidaAmigo();
            } else {
                codMagiaInimigo += 50;
                if (codMagiaInimigo >= 150) {
                    inimigo.get(idPersonagem).recuperaMana();
                    codMagiaInimigo = 50;
                }
                imprimiBotoes();
            }
        }
        imprimiBotoes();
    }//GEN-LAST:event_jBesferaDeAtaqueActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TelaUmPlayer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TelaUmPlayer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TelaUmPlayer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TelaUmPlayer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TelaUmPlayer().setVisible(true);
            }
        });
    }

//método para dois personagens!!
    public void daInicio(ArrayList<Personagem> pers) {
        jLabel.setText(pers.get(0).getClase());

    }

//metódo para um personagem!!
    public void daInicio(Personagem pers, ArrayList<Personagem> in) {
        inimigo = in;//O ARRAY INIMIGO VAI APONTAR PARA O ENDEREÇO DO ARRAY IN.
        amigo = pers;//A VARIAVEL AMIGO VAI APONTAR PARA O ENDEREÇO DA VARIAVEL PERS.
        imprimir();
        imprimirBotoesA();
        imprimirM();
    }

    //METODO RESPONSAVEL POR IMPRIMIR DADOS DO AMIGO E INIMIGO NOS LABELS
    public void imprimir() {

        //---------------AMIGO-----------------------------------//
        jL_Classe.setText(amigo.getClase());
        jL_Vida.setText(String.valueOf(amigo.getPontoDeVida()));
        jL_Mana.setText(String.valueOf(amigo.getPontosDeMana()));

        jL_ResistenciaFisica.setText(String.valueOf(amigo.getResistenciaFisica()));
        jL_ResistenciaMagica.setText(String.valueOf(amigo.getResistenciaMagica()));
        //-------------INIMIGO-----------------------------------//

        jL_VidaI.setText(String.valueOf(inimigo.get(idPersonagem).getPontoDeVida()));
        jL_ManaI.setText(String.valueOf(inimigo.get(idPersonagem).getPontosDeMana()));
        jL_ResistenciaFisicaI.setText(String.valueOf(inimigo.get(idPersonagem).getResistenciaFisica()));
        jL_ResistenciaMagicaI.setText(String.valueOf(inimigo.get(idPersonagem).getResistenciaMagica()));
        jLclasseI.setText(inimigo.get(idPersonagem).getClase());

        //A PRINCIPIO TODOS OS BOTOES FICAM FALSE OU INVISIVEIS
        if (auxBotoes == 0) {
            inBotoes();
            auxBotoes += 1;
        }
    }

    //RESPONSAVEL POR DEIXAR VISIVEIS OS BOTOES REFERENTES AS ARMAS DO PERSONAGEM DO AMIGO VISIVEL
    public void imprimirBotoesA() {

        if (amigo.getClase().equals("Troll")) {
            jBcajado.setVisible(true);
            jBporrete.setVisible(true);
        } else if (amigo.getClase().equals("Guerreiro")) {
            jBporrete.setVisible(true);
            jBespadaBarroca.setVisible(true);
        } else if (amigo.getClase().equals("Paladino")) {
            jBtridenteSagrado.setVisible(true);
            jBbesta.setVisible(true);
        } else if (amigo.getClase().equals("Ladrão")) {
            jBcajado.setVisible(true);
            jBporrete.setVisible(true);
            jBbesta.setVisible(true);
            jBesferaDeAtaque.setVisible(true);
        } else if (amigo.getClase().equals("Mago")) {
            jBcajado.setVisible(true);
            jBtridenteSagrado.setVisible(true);
        } else if (amigo.getClase().equals("Dragão")) {
            jBgarraLetal.setVisible(true);
        } else if (amigo.getClase().equals("Animal")) {
            jBgarraLetal.setVisible(true);
        } else if (amigo.getClase().equals("Zumbi")) {
            jBcajado.setVisible(true);
            jBgarraLetal.setVisible(true);
            jBporrete.setVisible(true);
        }
    }

    //RESPONSAVEL POR DEIXAR OS BOTOES REFERENTES AS MAGIAS DO PERSONAGEM DO AMIGO
    public void imprimirM() {
        if (amigo.getClase().equals("Troll")) {
            if (amigo.getPontosDeMana() >= 12) {
                jBenvenenamento.setVisible(true);
            } else {
                jBenvenenamento.setVisible(false);
            }
        } else if (amigo.getClase().equals("Guerreiro")) {
            if (amigo.getPontosDeMana() >= 12) {
                jBtempestade.setVisible(true);
            } else {
                jBtempestade.setVisible(false);
            }
        } else if (amigo.getClase().equals("Paladino")) {
            if (amigo.getPontosDeMana() >= 14) {
                jBtempestade.setVisible(true);
                jBpocaoDeVida.setVisible(true);
                jBflamaGelada.setVisible(true);
            } else if (amigo.getPontosDeMana() >= 12) {
                jBtempestade.setVisible(true);
                jBpocaoDeVida.setVisible(true);
                jBflamaGelada.setVisible(false);
            } else {
                jBtempestade.setVisible(false);
                jBpocaoDeVida.setVisible(false);
                jBflamaGelada.setVisible(false);
            }
        } else if (amigo.getClase().equals("Ladrão")) {
            if (amigo.getPontosDeMana() >= 12) {
                jBtempestade.setVisible(true);
                jBenvenenamento.setVisible(true);
            } else {
                jBtempestade.setVisible(false);
                jBenvenenamento.setVisible(false);
            }
        } else if (amigo.getClase().equals("Mago")) {
            if (amigo.getPontosDeMana() >= 16) {
                jBtempestade.setVisible(true);
                jBpocaoDeVida.setVisible(true);
                jBflamaGelada.setVisible(true);
                jBbioAntraz.setVisible(true);
                jBcura.setVisible(true);
                jBenvenenamento.setVisible(true);
            } else if (amigo.getPontosDeMana() >= 14) {
                jBtempestade.setVisible(true);
                jBpocaoDeVida.setVisible(true);
                jBflamaGelada.setVisible(true);
                jBbioAntraz.setVisible(true);
                jBcura.setVisible(false);
                jBenvenenamento.setVisible(true);
            } else if (amigo.getPontosDeMana() >= 12) {
                jBtempestade.setVisible(true);
                jBpocaoDeVida.setVisible(true);
                jBflamaGelada.setVisible(false);
                jBbioAntraz.setVisible(false);
                jBcura.setVisible(false);
                jBenvenenamento.setVisible(true);
            } else {
                jBtempestade.setVisible(false);
                jBpocaoDeVida.setVisible(false);
                jBflamaGelada.setVisible(false);
                jBbioAntraz.setVisible(false);
                jBcura.setVisible(false);
                jBenvenenamento.setVisible(false);
            }
        } else if (amigo.getClase().equals("Dragão")) {
            if (amigo.getPontosDeMana() >= 12) {
                jBhálitoDeFogo.setVisible(true);
            } else {
                jBhálitoDeFogo.setVisible(false);
            }
        } else if (amigo.getClase().equals("Animal")) {
            if (amigo.getPontosDeMana() >= 15) {
                jBbioAntraz.setVisible(true);
            } else {
                jBbioAntraz.setVisible(false);
            }
        } else if (amigo.getClase().equals("Zumbi")) {
            if (amigo.getPontosDeMana() >= 12) {
                jBenvenenamento.setVisible(true);
            } else {
                jBenvenenamento.setVisible(false);
            }
        }

    }
    
    //RESPONSAVEL POR DEIXAR TODOS OS BOTOES FALSE OU INVISIVEIS
    public void inBotoes() {
        jBbesta.setVisible(false);
        jBbioAntraz.setVisible(false);
        jBcajado.setVisible(false);
        jBcura.setVisible(false);
        jBenvenenamento.setVisible(false);
        jBesferaDeAtaque.setVisible(false);
        jBespadaBarroca.setVisible(false);
        jBflamaGelada.setVisible(false);
        jBgarraLetal.setVisible(false);
        jBhálitoDeFogo.setVisible(false);
        jBpocaoDeVida.setVisible(false);
        jBporrete.setVisible(false);
        jBtempestade.setVisible(false);
        jBtridenteSagrado.setVisible(false);
    }

    //METODO RESPONSAVEL POR GERAR CADA JOGODA DO INIMIGO. 
    //CADA JOGADA E GERADA CONFORME O NUMERO GERADO PELA FUNÇAO RANDOM
    public void vezInimigo() {
        int jogada = 0;

        //CASO O INIMIGO FOR GUERREIRO
        if (inimigo.get((idPersonagem)).getClase().equals("Guerreiro")) {
            //RESPONSAVEL POR SELECIONAR A JOGADA.
            while (jogada != 30) {
                jogada = gerador.nextInt(4);

                if (jogada == 1) {
                    controlaJoagada = 1;
                    jBespadaBarroca.doClick();
                    jogada = 30;
                } else if (jogada == 2) {
                    controlaJoagada = 1;
                    jBporrete.doClick();
                    jogada = 30;
                } else if (jogada == 3) {
                    controlaJoagada = 1;
                    jBtempestade.doClick();
                    jogada = 30;
                }
            }
            //CASO O INIMIGO FOR LADRÃO
        } else if (inimigo.get((idPersonagem)).getClase().equals("Ladrão")) {
            //RESPONSAVEL POR SELECIONAR A JOGADA.    
            while (jogada != 30) {
                jogada = gerador.nextInt(6);

                if (jogada == 1) {
                    controlaJoagada = 1;
                    jBporrete.doClick();
                    jogada = 30;
                } else if (jogada == 2) {
                    controlaJoagada = 1;
                    jBcajado.doClick();
                    jogada = 30;
                } else if (jogada == 3) {
                    controlaJoagada = 1;
                    jBbesta.doClick();
                    jogada = 30;
                } else if (jogada == 4) {
                    controlaJoagada = 1;
                    jBesferaDeAtaque.doClick();
                    jogada = 30;
                } else if (jogada == 5) {
                    controlaJoagada = 1;
                    jBenvenenamento.doClick();
                    jogada = 30;
                } else if (jogada == 6) {
                    controlaJoagada = 1;
                    jBtempestade.doClick();
                    jogada = 30;
                }
            }
            //CASO O INIMIGO FOR MAGO
        } else if (inimigo.get((idPersonagem)).getClase().equals("Mago")) {
            //RESPONSAVEL POR SELECIONAR A JOGADA.
            while (jogada != 30) {
                jogada = gerador.nextInt(10);

                if (jogada == 1) {
                    controlaJoagada = 1;
                    jBtridenteSagrado.doClick();
                    jogada = 30;
                } else if (jogada == 2) {
                    controlaJoagada = 1;
                    jBcajado.doClick();
                    jogada = 30;
                } else if (jogada == 3) {
                    controlaJoagada = 1;
                    jBpocaoDeVida.doClick();
                    jogada = 30;
                } else if (jogada == 4) {
                    controlaJoagada = 1;
                    jBbioAntraz.doClick();
                    jogada = 30;
                } else if (jogada == 5) {
                    controlaJoagada = 1;
                    jBcura.doClick();
                    jogada = 30;
                } else if (jogada == 6) {
                    controlaJoagada = 1;
                    jBflamaGelada.doClick();
                    jogada = 30;
                } else if (jogada == 7) {
                    controlaJoagada = 1;
                    jBenvenenamento.doClick();
                    jogada = 30;
                } else if (jogada == 8) {
                    controlaJoagada = 1;
                    jBtempestade.doClick();
                    jogada = 30;
                }
            }
            //CASO O INIMIGO FOR PALADINO
        } else if (inimigo.get((idPersonagem)).getClase().equals("Paladino")) {
            //RESPONSAVEL POR SELECIONAR A JOGADA.
            while (jogada != 30) {
                jogada = gerador.nextInt(6);

                if (jogada == 1) {
                    controlaJoagada = 1;
                    jBtridenteSagrado.doClick();
                    jogada = 30;
                } else if (jogada == 2) {
                    controlaJoagada = 1;
                    jBbesta.doClick();
                    jogada = 30;
                } else if (jogada == 3) {
                    controlaJoagada = 1;
                    jBpocaoDeVida.doClick();
                    jogada = 30;
                } else if (jogada == 4) {
                    controlaJoagada = 1;
                    jBflamaGelada.doClick();
                    jogada = 30;
                } else if (jogada == 5) {
                    controlaJoagada = 1;
                    jBtempestade.doClick();
                    jogada = 30;
                }
            }
            //CASO O INIMIGO FOR ANIMAL
        } else if (inimigo.get((idPersonagem)).getClase().equals("Animal")) {
            //RESPONSAVEL POR SELECIONAR A JOGADA.
            while (jogada != 30) {
                jogada = gerador.nextInt(3);

                if (jogada == 1) {
                    controlaJoagada = 1;
                    jBgarraLetal.doClick();
                    jogada = 30;
                } else if (jogada == 2) {
                    controlaJoagada = 1;
                    jBbioAntraz.doClick();
                    jogada = 30;
                }
            }
            //CASO O INIMIGO FOR TROLL
        } else if (inimigo.get((idPersonagem)).getClase().equals("Troll")) {
            //RESPONSAVEL POR SELECIONAR A JOGADA.
            while (jogada != 30) {
                jogada = gerador.nextInt(4);

                if (jogada == 1) {
                    controlaJoagada = 1;
                    jBporrete.doClick();
                    jogada = 30;
                } else if (jogada == 2) {
                    controlaJoagada = 1;
                    jBcajado.doClick();
                    jogada = 30;
                } else if (jogada == 3) {
                    controlaJoagada = 1;
                    jBenvenenamento.doClick();
                    jogada = 30;
                }
            }
            //CASO O INIMIGO FOR DRAGÃO
        } else if (inimigo.get((idPersonagem)).getClase().equals("Dragão")) {
            //RESPONSAVEL POR SELECIONAR A JOGADA.
            while (jogada != 30) {
                jogada = gerador.nextInt(3);

                if (jogada == 1) {
                    controlaJoagada = 1;
                    jBgarraLetal.doClick();
                    jogada = 30;
                } else if (jogada == 2) {
                    controlaJoagada = 1;
                    jBhálitoDeFogo.doClick();
                    jogada = 30;
                }
            }
            //CASO O INIMIGO FOR ZUMBI
        } else if (inimigo.get((idPersonagem)).getClase().equals("Zumbi")) {
            //RESPONSAVEL POR SELECIONAR A JOGADA.
            while (jogada != 30) {
                jogada = gerador.nextInt(5);

                if (jogada == 1) {
                    controlaJoagada = 1;
                    jBgarraLetal.doClick();
                    jogada = 30;
                } else if (jogada == 2) {
                    controlaJoagada = 1;
                    jBporrete.doClick();
                    jogada = 30;
                } else if (jogada == 3) {
                    controlaJoagada = 1;
                    jBcajado.doClick();
                    jogada = 30;
                } else if (jogada == 4) {
                    controlaJoagada = 1;
                    jBenvenenamento.doClick();
                    jogada = 30;
                }
            }
        }
        controlaJoagada = 0;
    }

    //RESPONSAVEL PELE TROCA DE PERSONAGENS DO ARRAY DE INIMIGOS
    public void trocaPeronagem() {
        if (inimigo.size() > idPersonagem) {
            codMagiaInimigo=0;
            codMagia=0;
            idPersonagem += 1;
            amigo.recuperaTotal();
        } else {
            JOptionPane.showMessageDialog(null, "Parabéns você concluiu o jogo!!!");
        }
    }
    
    //METODO RESPONSAVEL POR ATUALIZAR DADOS DOS LABELS
    public void imprimiBotoes(){
                imprimir();
                imprimirBotoesA();
                imprimirM();
    }
    
    //VERIFICA SE INIMIGO MORREU
    public void verifaVidaInimigo(){
        if (0 >= inimigo.get(idPersonagem).getPontoDeVida()) {
                    inimigo.get(idPersonagem).setPontoDeVida(0);
                    imprimiBotoes();
                    JOptionPane.showMessageDialog(null, "Você venceu!!!");
                    trocaPeronagem();
                    imprimiBotoes();
                    controlaJoagada = 0;
                }
    }

    //VERIFICA SE O AMIGO MORREU
    public void verifaVidaAmigo(){
        if (0 >= amigo.getPontoDeVida()) {
            amigo.setPontoDeVida(0);
            imprimiBotoes();    
            JOptionPane.showMessageDialog(null, "Você perdeu!!!");
            Final fi = new Final();
            setVisible(false);
            fi.setVisible(true);
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jBbesta;
    private javax.swing.JButton jBbioAntraz;
    private javax.swing.JButton jBcajado;
    private javax.swing.JButton jBcura;
    private javax.swing.JButton jBenvenenamento;
    private javax.swing.JButton jBesferaDeAtaque;
    private javax.swing.JButton jBespadaBarroca;
    private javax.swing.JButton jBflamaGelada;
    private javax.swing.JButton jBgarraLetal;
    private javax.swing.JButton jBhálitoDeFogo;
    private javax.swing.JButton jBpocaoDeVida;
    private javax.swing.JButton jBporrete;
    private javax.swing.JButton jBtempestade;
    private javax.swing.JButton jBtridenteSagrado;
    private javax.swing.JLabel jL_Classe;
    private javax.swing.JLabel jL_ClasseI;
    private javax.swing.JLabel jL_Mana;
    private javax.swing.JLabel jL_ManaI;
    private javax.swing.JLabel jL_ResistenciaFisica;
    private javax.swing.JLabel jL_ResistenciaFisicaI;
    private javax.swing.JLabel jL_ResistenciaMagica;
    private javax.swing.JLabel jL_ResistenciaMagicaI;
    private javax.swing.JLabel jL_Vida;
    private javax.swing.JLabel jL_VidaI;
    private javax.swing.JLabel jLabel;
    private javax.swing.JLabel jLabel0;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLabel jLclasseI;
    // End of variables declaration//GEN-END:variables
}
